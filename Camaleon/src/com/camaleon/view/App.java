/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.camaleon.view;

import com.camaleon.entities.FuncDependency;
import com.camaleon.entities.Relation;
import com.camaleon.entities.TreeSetListModel;
import com.camaleon.logic.LoadFile;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Alexander Lozano
 */
public class App extends javax.swing.JFrame {

    Relation relation = new Relation();
    TreeSetListModel<String> tslmAtributos = new TreeSetListModel<String>(String.CASE_INSENSITIVE_ORDER);
    TreeSetListModel<FuncDependency> tslmDepFuncionales = new TreeSetListModel<FuncDependency>();

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        jlAtributos.setModel(tslmAtributos);
        jlDepFuncionales.setModel(tslmDepFuncionales);
        jtpVista.setEnabledAt(1, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpVista = new javax.swing.JTabbedPane();
        jpAtributos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlAtributos = new javax.swing.JList<>();
        btnAddAtr = new javax.swing.JButton();
        btnEditAtr = new javax.swing.JButton();
        btnDelAtr = new javax.swing.JButton();
        jpDepFuncionales = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlDepFuncionales = new javax.swing.JList<>();
        btnAddDepFunc = new javax.swing.JButton();
        btnEditDepFunc = new javax.swing.JButton();
        btnDelDepFunc = new javax.swing.JButton();
        jpResultados = new javax.swing.JPanel();
        btnCargar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Camaleon");
        setResizable(false);

        jlAtributos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlAtributos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlAtributosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlAtributos);

        btnAddAtr.setText("Añadir");
        btnAddAtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAtrActionPerformed(evt);
            }
        });

        btnEditAtr.setText("Editar");
        btnEditAtr.setEnabled(false);
        btnEditAtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAtrActionPerformed(evt);
            }
        });

        btnDelAtr.setText("Eliminar");
        btnDelAtr.setEnabled(false);
        btnDelAtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelAtrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpAtributosLayout = new javax.swing.GroupLayout(jpAtributos);
        jpAtributos.setLayout(jpAtributosLayout);
        jpAtributosLayout.setHorizontalGroup(
            jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtributosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(jpAtributosLayout.createSequentialGroup()
                        .addComponent(btnAddAtr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditAtr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelAtr)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpAtributosLayout.setVerticalGroup(
            jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtributosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAtr)
                    .addComponent(btnEditAtr)
                    .addComponent(btnDelAtr))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpVista.addTab("Atributos", jpAtributos);

        jlDepFuncionales.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlDepFuncionales.setToolTipText("");
        jlDepFuncionales.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlDepFuncionalesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jlDepFuncionales);

        btnAddDepFunc.setText("Añadir");
        btnAddDepFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDepFuncActionPerformed(evt);
            }
        });

        btnEditDepFunc.setText("Editar");
        btnEditDepFunc.setEnabled(false);
        btnEditDepFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDepFuncActionPerformed(evt);
            }
        });

        btnDelDepFunc.setText("Eliminar");
        btnDelDepFunc.setEnabled(false);
        btnDelDepFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelDepFuncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpDepFuncionalesLayout = new javax.swing.GroupLayout(jpDepFuncionales);
        jpDepFuncionales.setLayout(jpDepFuncionalesLayout);
        jpDepFuncionalesLayout.setHorizontalGroup(
            jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDepFuncionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(jpDepFuncionalesLayout.createSequentialGroup()
                        .addComponent(btnAddDepFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditDepFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelDepFunc)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpDepFuncionalesLayout.setVerticalGroup(
            jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDepFuncionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDepFunc)
                    .addComponent(btnEditDepFunc)
                    .addComponent(btnDelDepFunc))
                .addContainerGap())
        );

        jtpVista.addTab("Dependencias Funcionales", jpDepFuncionales);

        javax.swing.GroupLayout jpResultadosLayout = new javax.swing.GroupLayout(jpResultados);
        jpResultados.setLayout(jpResultadosLayout);
        jpResultadosLayout.setHorizontalGroup(
            jpResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpResultadosLayout.setVerticalGroup(
            jpResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );

        btnCargar.setText("Cargar Archivo");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpVista)
            .addComponent(jpResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(337, 337, 337)
                .addComponent(btnCargar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jtpVista, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Archivos JSON", "json", "JSON");
        jFileChooser.setFileFilter(filter);
        int returnVal = jFileChooser.showOpenDialog(JOptionPane
                .getFrameForComponent((Component) evt.getSource()));
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = jFileChooser.getSelectedFile().getAbsolutePath();
            if (path.substring(path.lastIndexOf(".") + 1, path.length()).equalsIgnoreCase("json")) {
                relation = LoadFile.loadFile(path);
                for (Iterator<String> iterator = relation.getAttributes().iterator(); iterator.hasNext();) {
                    tslmAtributos.add(iterator.next());
                }
                for (Iterator<FuncDependency> iterator = relation.getDependencies().iterator(); iterator.hasNext();) {
                    tslmDepFuncionales.add(iterator.next());
                }
                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "El archivo seleccionado fue cargado correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
                jtpVista.setEnabledAt(1, true);
            } else {
                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud no selecciono un archivo válido", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnAddAtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAtrActionPerformed
        String attr = JOptionPane.showInputDialog(
                JOptionPane
                .getFrameForComponent((Component) evt.getSource()),
                "Ingrese el atributo",
                "Nuevo Atributo",
                JOptionPane.QUESTION_MESSAGE
        );
        if (attr != null) {
            relation.getAttributes().add(attr);
            tslmAtributos.add(attr);
            if(tslmAtributos.getSize()>1){
                jtpVista.setEnabledAt(1, true);
            }
        }

    }//GEN-LAST:event_btnAddAtrActionPerformed

    private void jlAtributosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlAtributosValueChanged
        if (jlAtributos.getSelectedIndex() > -1) {
            btnEditAtr.setEnabled(true);
            btnDelAtr.setEnabled(true);
        } else {
            btnEditAtr.setEnabled(false);
            btnDelAtr.setEnabled(false);
        }
    }//GEN-LAST:event_jlAtributosValueChanged

    private void btnEditAtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAtrActionPerformed
        int selected = jlAtributos.getSelectedIndex();
        if (selected > -1) {
            List<String> attributes = new ArrayList<String>(relation.getAttributes());
            String attr = attributes.get(selected);
            String newAttr = (String) JOptionPane.showInputDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ingrese el nombre del atributo", "Editar atributo", JOptionPane.OK_CANCEL_OPTION, null, null, attr);
            if (newAttr != null && !newAttr.equals("")) {
                attributes.remove(selected);
                attributes.add(selected, newAttr);
                relation.editAttr(attr, newAttr);
                tslmAtributos.remove(attr);
                tslmAtributos.add(newAttr);
                rePaintDepFunc();
            }
        }
    }//GEN-LAST:event_btnEditAtrActionPerformed

    private void btnDelAtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelAtrActionPerformed
        if (jlAtributos.getSelectedIndex() > -1) {
            int confirm = JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Está seguro de eliminar el atributo: " + jlAtributos.getSelectedValue(), "Confirmar", JOptionPane.OK_CANCEL_OPTION);
            if (confirm == JOptionPane.OK_OPTION) {
                String attr = jlAtributos.getSelectedValue();
                relation.delAttr(attr);
                tslmAtributos.remove(attr);
                rePaintDepFunc();
            }
        }
    }//GEN-LAST:event_btnDelAtrActionPerformed

    private void btnAddDepFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDepFuncActionPerformed
        FuncDependencyForm funcDependencyForm = new FuncDependencyForm(this, new FuncDependency(), relation.getAttributes());
        funcDependencyForm.setVisible(true);

    }//GEN-LAST:event_btnAddDepFuncActionPerformed

    private void btnEditDepFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDepFuncActionPerformed
        if (jlDepFuncionales.getSelectedIndex() > -1) {
            FuncDependency funcDep = jlDepFuncionales.getSelectedValue();
            FuncDependencyForm funcDependencyForm = new FuncDependencyForm(this, funcDep, relation.getAttributes());
            funcDependencyForm.setVisible(true);
        }
    }//GEN-LAST:event_btnEditDepFuncActionPerformed

    private void jlDepFuncionalesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlDepFuncionalesValueChanged
        if (jlDepFuncionales.getSelectedIndex() > -1) {
            btnEditDepFunc.setEnabled(true);
            btnDelDepFunc.setEnabled(true);
        } else {
            btnEditDepFunc.setEnabled(false);
            btnDelDepFunc.setEnabled(false);
        }
    }//GEN-LAST:event_jlDepFuncionalesValueChanged

    private void btnDelDepFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelDepFuncActionPerformed
        if (jlDepFuncionales.getSelectedIndex() > -1) {
            int confirm = JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Está seguro de eliminar el atributo: " + jlDepFuncionales.getSelectedValue(), "Confirmar", JOptionPane.OK_CANCEL_OPTION);
            if (confirm == JOptionPane.OK_OPTION) {
                FuncDependency funcDep = jlDepFuncionales.getSelectedValue();
                relation.getDependencies().remove(funcDep);
                tslmDepFuncionales.remove(funcDep);
                rePaintDepFunc();
            }
        }
    }//GEN-LAST:event_btnDelDepFuncActionPerformed

    private void rePaintDepFunc() {
        tslmDepFuncionales.clear();
        for (int i = 0; i < relation.getDependencies().size(); i++) {
            tslmDepFuncionales.add(relation.getDependencies().get(i));
        }
    }

    public void addFuncDependency(FuncDependency funcDependency) {
        this.relation.getDependencies().add(funcDependency);
        rePaintDepFunc();
        JOptionPane.showMessageDialog(this, "Se agregó la dependencia funcional correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
    }

    public void editFuncDependency(FuncDependency funcDependencyOld, FuncDependency funcDependencyNew) {
        this.relation.getDependencies().remove(funcDependencyOld);
        this.relation.getDependencies().add(funcDependencyNew);
        rePaintDepFunc();
        JOptionPane.showMessageDialog(this, "Se modificó la dependencia funcional correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    public void printAfterLoad() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAtr;
    private javax.swing.JButton btnAddDepFunc;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnDelAtr;
    private javax.swing.JButton btnDelDepFunc;
    private javax.swing.JButton btnEditAtr;
    private javax.swing.JButton btnEditDepFunc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlAtributos;
    private javax.swing.JList<FuncDependency> jlDepFuncionales;
    private javax.swing.JPanel jpAtributos;
    private javax.swing.JPanel jpDepFuncionales;
    private javax.swing.JPanel jpResultados;
    private javax.swing.JTabbedPane jtpVista;
    // End of variables declaration//GEN-END:variables
}
