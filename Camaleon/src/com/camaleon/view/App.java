/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.camaleon.view;

import com.camaleon.entities.FuncDependency;
import com.camaleon.entities.LoadFileResult;
import com.camaleon.entities.Relation;
import com.camaleon.entities.TreeSetListModel;
import com.camaleon.logic.Bernstein;
import com.camaleon.logic.CandidateKeys;
import com.camaleon.logic.LoadFile;
import com.camaleon.logic.MinimalCover;
import com.camaleon.logic.segterformanormal.Atribute;
import com.camaleon.logic.segterformanormal.DependenciaFuncional;
import com.camaleon.logic.segterformanormal.NormalForm;
import com.google.common.base.Joiner;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Alexander Lozano
 */
public class App extends javax.swing.JFrame {

    Relation relation = new Relation();
    TreeMap<String, HashSet<String>> partitions = new TreeMap<String, HashSet<String>>();
    List<HashSet<String>> cleanPartitions = new ArrayList<HashSet<String>>();
    List<HashSet<String>> keys = new ArrayList<HashSet<String>>();
    HashMap<HashSet<String>, HashSet<String>> closures = new HashMap<HashSet<String>, HashSet<String>>();
    TreeSetListModel<String> tslmAtributos = new TreeSetListModel<String>(String.CASE_INSENSITIVE_ORDER);
    TreeSetListModel<FuncDependency> tslmDepFuncionales = new TreeSetListModel<FuncDependency>();
    TreeSetListModel<FuncDependency> tslmRightDecomp = new TreeSetListModel<FuncDependency>();
    TreeSetListModel<FuncDependency> tslmRemStrangeElemLeft = new TreeSetListModel<FuncDependency>();
    TreeSetListModel<FuncDependency> tslmRemFuncDepRedundant = new TreeSetListModel<FuncDependency>();
    DefaultListModel<HashSet<String>> dlmCandidateKeys = new DefaultListModel<HashSet<String>>();
    DefaultListModel<Relation> dlmGetPartitions = new DefaultListModel<Relation>();

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        jlAtributos.setModel(tslmAtributos);
        jlDepFuncionales.setModel(tslmDepFuncionales);
        jlRightDecomp.setModel(tslmRightDecomp);
        jlRemStrangeElemLeft.setModel(tslmRemStrangeElemLeft);
        jlRemFuncDepRedundant.setModel(tslmRemFuncDepRedundant);
        jlCandidateKeys.setModel(dlmCandidateKeys);
        jlGetPartitions.setModel(dlmGetPartitions);
        jtpVista.setEnabledAt(1, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpVista = new javax.swing.JTabbedPane();
        jpAtributos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlAtributos = new javax.swing.JList<>();
        btnAddAtr = new javax.swing.JButton();
        btnEditAtr = new javax.swing.JButton();
        btnDelAtr = new javax.swing.JButton();
        btn2FormaNormal = new javax.swing.JButton();
        btn3aFormaNormal = new javax.swing.JButton();
        jpDepFuncionales = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlDepFuncionales = new javax.swing.JList<>();
        btnAddDepFunc = new javax.swing.JButton();
        btnEditDepFunc = new javax.swing.JButton();
        btnDelDepFunc = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        jtpResultados = new javax.swing.JTabbedPane();
        jpRightDecomp = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlRightDecomp = new javax.swing.JList<>();
        btnRightDecomposition = new javax.swing.JButton();
        jpRemStrangeElemLeft = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlRemStrangeElemLeft = new javax.swing.JList<>();
        btnRemStrangeElemLeft = new javax.swing.JButton();
        jpRemFuncDepRedundant = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlRemFuncDepRedundant = new javax.swing.JList<>();
        btnRemFuncDepRedundant = new javax.swing.JButton();
        jpCandidateKeys = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jlCandidateKeys = new javax.swing.JList<>();
        btnCandidateKeys = new javax.swing.JButton();
        jpGetPartitions = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jlGetPartitions = new javax.swing.JList<>();
        btnGetPartitions = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Camaleon");
        setPreferredSize(new java.awt.Dimension(1100, 500));
        setResizable(false);

        jlAtributos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlAtributos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlAtributosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlAtributos);

        btnAddAtr.setText("AÃ±adir");
        btnAddAtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAtrActionPerformed(evt);
            }
        });

        btnEditAtr.setText("Editar");
        btnEditAtr.setEnabled(false);
        btnEditAtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAtrActionPerformed(evt);
            }
        });

        btnDelAtr.setText("Eliminar");
        btnDelAtr.setEnabled(false);
        btnDelAtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelAtrActionPerformed(evt);
            }
        });

        btn2FormaNormal.setText("2a Forma Normal");
        btn2FormaNormal.setEnabled(false);
        btn2FormaNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2FormaNormalActionPerformed(evt);
            }
        });

        btn3aFormaNormal.setText("3a Forma Normal");
        btn3aFormaNormal.setEnabled(false);
        btn3aFormaNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3aFormaNormalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpAtributosLayout = new javax.swing.GroupLayout(jpAtributos);
        jpAtributos.setLayout(jpAtributosLayout);
        jpAtributosLayout.setHorizontalGroup(
            jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtributosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(jpAtributosLayout.createSequentialGroup()
                        .addComponent(btnAddAtr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditAtr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelAtr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn2FormaNormal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn3aFormaNormal)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpAtributosLayout.setVerticalGroup(
            jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtributosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAtr)
                    .addComponent(btnEditAtr)
                    .addComponent(btnDelAtr)
                    .addComponent(btn2FormaNormal)
                    .addComponent(btn3aFormaNormal))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpVista.addTab("Atributos", jpAtributos);

        jlDepFuncionales.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlDepFuncionales.setToolTipText("");
        jlDepFuncionales.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlDepFuncionalesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jlDepFuncionales);

        btnAddDepFunc.setText("AÃ±adir");
        btnAddDepFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDepFuncActionPerformed(evt);
            }
        });

        btnEditDepFunc.setText("Editar");
        btnEditDepFunc.setEnabled(false);
        btnEditDepFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDepFuncActionPerformed(evt);
            }
        });

        btnDelDepFunc.setText("Eliminar");
        btnDelDepFunc.setEnabled(false);
        btnDelDepFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelDepFuncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpDepFuncionalesLayout = new javax.swing.GroupLayout(jpDepFuncionales);
        jpDepFuncionales.setLayout(jpDepFuncionalesLayout);
        jpDepFuncionalesLayout.setHorizontalGroup(
            jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDepFuncionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(jpDepFuncionalesLayout.createSequentialGroup()
                        .addComponent(btnAddDepFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditDepFunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelDepFunc)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpDepFuncionalesLayout.setVerticalGroup(
            jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDepFuncionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpDepFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDepFunc)
                    .addComponent(btnEditDepFunc)
                    .addComponent(btnDelDepFunc))
                .addContainerGap())
        );

        jtpVista.addTab("Dependencias Funcionales", jpDepFuncionales);

        btnCargar.setText("Cargar Archivo");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jlRightDecomp);

        btnRightDecomposition.setText("Calcular");
        btnRightDecomposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightDecompositionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRightDecompLayout = new javax.swing.GroupLayout(jpRightDecomp);
        jpRightDecomp.setLayout(jpRightDecompLayout);
        jpRightDecompLayout.setHorizontalGroup(
            jpRightDecompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRightDecompLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRightDecompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRightDecompLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRightDecomposition)))
                .addContainerGap())
        );
        jpRightDecompLayout.setVerticalGroup(
            jpRightDecompLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRightDecompLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRightDecomposition)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jtpResultados.addTab("Desc. Derecha", jpRightDecomp);

        jScrollPane4.setViewportView(jlRemStrangeElemLeft);

        btnRemStrangeElemLeft.setText("Calcular");
        btnRemStrangeElemLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemStrangeElemLeftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRemStrangeElemLeftLayout = new javax.swing.GroupLayout(jpRemStrangeElemLeft);
        jpRemStrangeElemLeft.setLayout(jpRemStrangeElemLeftLayout);
        jpRemStrangeElemLeftLayout.setHorizontalGroup(
            jpRemStrangeElemLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRemStrangeElemLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRemStrangeElemLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRemStrangeElemLeftLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRemStrangeElemLeft)))
                .addContainerGap())
        );
        jpRemStrangeElemLeftLayout.setVerticalGroup(
            jpRemStrangeElemLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRemStrangeElemLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemStrangeElemLeft)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jtpResultados.addTab("Rem. Elem. ExtraÃ±os Izq.", jpRemStrangeElemLeft);

        jScrollPane5.setViewportView(jlRemFuncDepRedundant);

        btnRemFuncDepRedundant.setText("Calcular");
        btnRemFuncDepRedundant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemFuncDepRedundantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRemFuncDepRedundantLayout = new javax.swing.GroupLayout(jpRemFuncDepRedundant);
        jpRemFuncDepRedundant.setLayout(jpRemFuncDepRedundantLayout);
        jpRemFuncDepRedundantLayout.setHorizontalGroup(
            jpRemFuncDepRedundantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRemFuncDepRedundantLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRemFuncDepRedundantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRemFuncDepRedundantLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRemFuncDepRedundant)))
                .addContainerGap())
        );
        jpRemFuncDepRedundantLayout.setVerticalGroup(
            jpRemFuncDepRedundantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRemFuncDepRedundantLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemFuncDepRedundant)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jtpResultados.addTab("Rem. Dep. Func. Redundantes", jpRemFuncDepRedundant);

        jScrollPane6.setViewportView(jlCandidateKeys);

        btnCandidateKeys.setText("Calcular");
        btnCandidateKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCandidateKeysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCandidateKeysLayout = new javax.swing.GroupLayout(jpCandidateKeys);
        jpCandidateKeys.setLayout(jpCandidateKeysLayout);
        jpCandidateKeysLayout.setHorizontalGroup(
            jpCandidateKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCandidateKeysLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCandidateKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpCandidateKeysLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCandidateKeys)))
                .addContainerGap())
        );
        jpCandidateKeysLayout.setVerticalGroup(
            jpCandidateKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCandidateKeysLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCandidateKeys)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jtpResultados.addTab("Llaves Candidatas", jpCandidateKeys);

        jScrollPane7.setViewportView(jlGetPartitions);

        btnGetPartitions.setText("Calcular");
        btnGetPartitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetPartitionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpGetPartitionsLayout = new javax.swing.GroupLayout(jpGetPartitions);
        jpGetPartitions.setLayout(jpGetPartitionsLayout);
        jpGetPartitionsLayout.setHorizontalGroup(
            jpGetPartitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGetPartitionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpGetPartitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpGetPartitionsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGetPartitions)))
                .addContainerGap())
        );
        jpGetPartitionsLayout.setVerticalGroup(
            jpGetPartitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGetPartitionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetPartitions)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jtpResultados.addTab("Bernstein", jpGetPartitions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpVista)
            .addGroup(layout.createSequentialGroup()
                .addGap(448, 448, 448)
                .addComponent(btnCargar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jtpResultados)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jtpVista, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtpResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Archivos JSON", "json", "JSON");
        jFileChooser.setFileFilter(filter);
        int returnVal = jFileChooser.showOpenDialog(JOptionPane
                .getFrameForComponent((Component) evt.getSource()));
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            cleanAll();
            String path = jFileChooser.getSelectedFile().getAbsolutePath();
            LoadFileResult loadFileResult = LoadFile.loadFile(path);
            if (loadFileResult.getStatus().equals(LoadFileResult.Status.SUCCESS)) {
                relation = loadFileResult.getRelation();
                for (Iterator<String> iterator = relation.getAttributes().iterator(); iterator.hasNext();) {
                    tslmAtributos.add(iterator.next());
                }
                for (Iterator<FuncDependency> iterator = relation.getDependencies().iterator(); iterator.hasNext();) {
                    tslmDepFuncionales.add(iterator.next());
                }

                StringBuilder sb = new StringBuilder("El archivo seleccionado fue cargado correctamente");

                if (loadFileResult.getMessages().size() > 0) {
                    sb.append(", con las siguientes anotaciones:\n\n");
                    sb.append(Joiner.on("\n").join(loadFileResult.getMessages()));
                } else {
                    sb.append(".");
                }

                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), sb.toString(), "Correcto", JOptionPane.INFORMATION_MESSAGE);
                btn2FormaNormal.setEnabled(false);
                btn3aFormaNormal.setEnabled(false);
                jtpVista.setEnabledAt(1, true);
            } else {
                String errors = new StringBuilder("Ocurrieron los siguientes errores al cargar el archivo: ").append("\n\n").append(Joiner.on("\n").join(loadFileResult.getMessages())).toString();
                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), errors, "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnAddAtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAtrActionPerformed
        String attr = JOptionPane.showInputDialog(
                JOptionPane
                .getFrameForComponent((Component) evt.getSource()),
                "Ingrese el atributo",
                "Nuevo Atributo",
                JOptionPane.QUESTION_MESSAGE
        );
        if (attr != null) {
            relation.getAttributes().add(attr);
            tslmAtributos.add(attr);
            if (tslmAtributos.getSize() > 1) {
                jtpVista.setEnabledAt(1, true);
            }
        }

    }//GEN-LAST:event_btnAddAtrActionPerformed

    private void jlAtributosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlAtributosValueChanged
        if (jlAtributos.getSelectedIndex() > -1) {
            btnEditAtr.setEnabled(true);
            btnDelAtr.setEnabled(true);
        } else {
            btnEditAtr.setEnabled(false);
            btnDelAtr.setEnabled(false);
        }
    }//GEN-LAST:event_jlAtributosValueChanged

    private void btnEditAtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAtrActionPerformed
        int selected = jlAtributos.getSelectedIndex();
        if (selected > -1) {
            List<String> attributes = new ArrayList<String>(relation.getAttributes());
            String attr = attributes.get(selected);
            String newAttr = (String) JOptionPane.showInputDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ingrese el nombre del atributo", "Editar atributo", JOptionPane.OK_CANCEL_OPTION, null, null, attr);
            if (newAttr != null && !newAttr.equals("")) {
                attributes.remove(selected);
                attributes.add(selected, newAttr);
                relation.editAttr(attr, newAttr);
                tslmAtributos.remove(attr);
                tslmAtributos.add(newAttr);
                rePaintDepFunc(tslmDepFuncionales);
            }
        }
    }//GEN-LAST:event_btnEditAtrActionPerformed

    private void btnDelAtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelAtrActionPerformed
        if (jlAtributos.getSelectedIndex() > -1) {
            int confirm = JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "EstÃ¡ seguro de eliminar el atributo: " + jlAtributos.getSelectedValue(), "Confirmar", JOptionPane.OK_CANCEL_OPTION);
            if (confirm == JOptionPane.OK_OPTION) {
                String attr = jlAtributos.getSelectedValue();
                relation.delAttr(attr);
                tslmAtributos.remove(attr);
                rePaintDepFunc(tslmDepFuncionales);
            }
        }
    }//GEN-LAST:event_btnDelAtrActionPerformed

    private void btnAddDepFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDepFuncActionPerformed
        FuncDependencyForm funcDependencyForm = new FuncDependencyForm(this, new FuncDependency(), relation.getAttributes());
        funcDependencyForm.setVisible(true);

    }//GEN-LAST:event_btnAddDepFuncActionPerformed

    private void btnEditDepFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDepFuncActionPerformed
        if (jlDepFuncionales.getSelectedIndex() > -1) {
            FuncDependency funcDep = jlDepFuncionales.getSelectedValue();
            FuncDependencyForm funcDependencyForm = new FuncDependencyForm(this, funcDep, relation.getAttributes());
            funcDependencyForm.setVisible(true);
        }
    }//GEN-LAST:event_btnEditDepFuncActionPerformed

    private void jlDepFuncionalesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlDepFuncionalesValueChanged
        if (jlDepFuncionales.getSelectedIndex() > -1) {
            btnEditDepFunc.setEnabled(true);
            btnDelDepFunc.setEnabled(true);
        } else {
            btnEditDepFunc.setEnabled(false);
            btnDelDepFunc.setEnabled(false);
        }
    }//GEN-LAST:event_jlDepFuncionalesValueChanged

    private void btnDelDepFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelDepFuncActionPerformed
        if (jlDepFuncionales.getSelectedIndex() > -1) {
            int confirm = JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "EstÃ¡ seguro de eliminar el atributo: " + jlDepFuncionales.getSelectedValue(), "Confirmar", JOptionPane.OK_CANCEL_OPTION);
            if (confirm == JOptionPane.OK_OPTION) {
                FuncDependency funcDep = jlDepFuncionales.getSelectedValue();
                relation.getDependencies().remove(funcDep);
                tslmDepFuncionales.remove(funcDep);
                rePaintDepFunc(tslmDepFuncionales);
            }
        }
    }//GEN-LAST:event_btnDelDepFuncActionPerformed

    private void btnGetPartitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetPartitionsActionPerformed
        if (relation.getDependencies().size() > 0) {
            List<Relation> bernstein = Bernstein.getBernstein(relation.getAttributes(), relation.getDependencies());
            dlmGetPartitions.clear();
            for (int i = 0; i < bernstein.size(); i++) {
                dlmGetPartitions.addElement(bernstein.get(i));
            }
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Se calcularon las particiones de la relaciÃ³n correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos una dependencia funcional para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGetPartitionsActionPerformed

    private void btnCandidateKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCandidateKeysActionPerformed
        if (relation.getDependencies().size() > 0) {
            keys = CandidateKeys.candidateKeys(relation,
                    closures);
            dlmCandidateKeys.clear();
            for (int i = 0; i < keys.size(); i++) {
                dlmCandidateKeys.addElement(keys.get(i));
            }
            btn2FormaNormal.setEnabled(true);
            btn3aFormaNormal.setEnabled(true);
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Se calcularon las llaves candidatas de la relaciÃ³n correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos una dependencia funcional para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCandidateKeysActionPerformed

    private void btnRemFuncDepRedundantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemFuncDepRedundantActionPerformed
        if (relation.getDependencies().size() > 1) {
            relation.setDependencies(MinimalCover.removeRedundantDependencies(
                    relation.getDependencies()));
            rePaintDepFunc(tslmRemFuncDepRedundant);
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Se eliminaron dependencias funcionales redundantes correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos dos dependencia funcional para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemFuncDepRedundantActionPerformed

    private void btnRemStrangeElemLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemStrangeElemLeftActionPerformed
        if (relation.getDependencies().size() > 0) {
            relation.setDependencies(MinimalCover.removeStrangeElemLeft(
                    relation.getDependencies(), closures));
            rePaintDepFunc(tslmRemStrangeElemLeft);
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Se eliminaron elementos extraÃ±os a izquierda correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos una dependencia funcional para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemStrangeElemLeftActionPerformed

    private void btnRightDecompositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightDecompositionActionPerformed
        if (relation.getDependencies().size() > 0) {
            relation.setDependencies(MinimalCover.rightDecomposition(relation
                    .getDependencies()));
            rePaintDepFunc(tslmRightDecomp);
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Se realizÃ³ descomposiciÃ³n a la derecha correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos una dependencia funcional para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRightDecompositionActionPerformed

    private void btn2FormaNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2FormaNormalActionPerformed
        if (relation.getDependencies().size() > 0 && keys.size() > 0) {
            Function<String, Atribute> convertFromStringToAtribute = new Function<String, Atribute>() {
                @Override
                public Atribute apply(String t) {
                    return new Atribute(t);
                }
            };

            Function<FuncDependency, DependenciaFuncional> convertFromFuncDepToDepFunc = new Function<FuncDependency, DependenciaFuncional>() {
                public DependenciaFuncional apply(FuncDependency t) {
                    List<Atribute> implicante = t.getImplicant().stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
                    List<Atribute> implicado = t.getImplied().stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
                    DependenciaFuncional f = new DependenciaFuncional(implicante, implicado);
                    return f;
                }
            };

            List<DependenciaFuncional> dependencias = relation.getDependencies().stream().map(convertFromFuncDepToDepFunc).collect(Collectors.<DependenciaFuncional>toList());
            List<Atribute> atributos = relation.getAttributes().stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
            List<List<Atribute>> keysList = new ArrayList<>();
            for (Iterator<HashSet<String>> iterator = keys.iterator(); iterator.hasNext();) {
                HashSet<String> key = iterator.next();
                List<Atribute> collect = key.stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
                keysList.add(collect);
            }
            NormalForm normalForm = new NormalForm();
            boolean segundaFormaNormal = normalForm.validarSiEstaEnSegundaFormaNormal(dependencias, atributos, keysList);
            String mensaje = "";
            int tipo = 0;
            if (segundaFormaNormal) {
                mensaje = "La relaciÃ²n actual, se encuentra en segunda forma normal";
                tipo = JOptionPane.INFORMATION_MESSAGE;
            } else {
                mensaje = "La relaciÃ²n actual, no se encuentra en segunda forma normal";
                tipo = JOptionPane.ERROR_MESSAGE;
            }
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), mensaje, "Resultados", tipo);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos una dependencia funcional y calcular llaves candidatas para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn2FormaNormalActionPerformed

    private void btn3aFormaNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3aFormaNormalActionPerformed
        if (relation.getDependencies().size() > 0 && keys.size() > 0) {
            Function<String, Atribute> convertFromStringToAtribute = new Function<String, Atribute>() {
                @Override
                public Atribute apply(String t) {
                    return new Atribute(t);
                }
            };

            Function<FuncDependency, DependenciaFuncional> convertFromFuncDepToDepFunc = new Function<FuncDependency, DependenciaFuncional>() {
                public DependenciaFuncional apply(FuncDependency t) {
                    List<Atribute> implicante = t.getImplicant().stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
                    List<Atribute> implicado = t.getImplied().stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
                    DependenciaFuncional f = new DependenciaFuncional(implicante, implicado);
                    return f;
                }
            };

            List<DependenciaFuncional> dependencias = relation.getDependencies().stream().map(convertFromFuncDepToDepFunc).collect(Collectors.<DependenciaFuncional>toList());
            List<Atribute> atributos = relation.getAttributes().stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
            List<List<Atribute>> keysList = new ArrayList<>();
            for (Iterator<HashSet<String>> iterator = keys.iterator(); iterator.hasNext();) {
                HashSet<String> key = iterator.next();
                List<Atribute> collect = key.stream().map(convertFromStringToAtribute).collect(Collectors.<Atribute>toList());
                keysList.add(collect);
            }
            NormalForm normalForm = new NormalForm();
            boolean terceraFormaNormal = normalForm.validarSiEstaEnTerceraFormaNormal(dependencias, keysList);
            String mensaje = "";
            int tipo = 0;
            if (terceraFormaNormal) {
                mensaje = "La relaciÃ²n actual, se encuentra en tercera forma normal";
                tipo = JOptionPane.INFORMATION_MESSAGE;
            } else {
                mensaje = "La relaciÃ²n actual, no se encuentra en tercera forma normal";
                tipo = JOptionPane.ERROR_MESSAGE;
            }
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), mensaje, "Resultados", tipo);
        } else {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent((Component) evt.getSource()), "Ud debe crear al menos una dependencia funcional y calcular llaves candidatas para utilizar esta opciÃ³n", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn3aFormaNormalActionPerformed

    private void rePaintDepFunc(TreeSetListModel model) {
        model.clear();
        for (int i = 0; i < relation.getDependencies().size(); i++) {
            model.add(relation.getDependencies().get(i));
        }
    }

    public void addFuncDependency(FuncDependency funcDependency) {
        this.relation.getDependencies().add(funcDependency);
        rePaintDepFunc(tslmDepFuncionales);
        JOptionPane.showMessageDialog(this, "Se agregÃ³ la dependencia funcional correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
    }

    public void editFuncDependency(FuncDependency funcDependencyOld, FuncDependency funcDependencyNew) {
        this.relation.getDependencies().remove(funcDependencyOld);
        this.relation.getDependencies().add(funcDependencyNew);
        rePaintDepFunc(tslmDepFuncionales);
        JOptionPane.showMessageDialog(this, "Se modificÃ³ la dependencia funcional correctamente", "Correcto", JOptionPane.INFORMATION_MESSAGE);
    }

    public void cleanAll() {
        tslmAtributos.clear();
        tslmDepFuncionales.clear();
        tslmRightDecomp.clear();
        tslmRemStrangeElemLeft.clear();
        tslmRemFuncDepRedundant.clear();
        dlmCandidateKeys.clear();
        dlmGetPartitions.clear();
        jtpVista.setSelectedIndex(0);
        jtpVista.setEnabledAt(1, false);
        jtpResultados.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    public void printAfterLoad() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn2FormaNormal;
    private javax.swing.JButton btn3aFormaNormal;
    private javax.swing.JButton btnAddAtr;
    private javax.swing.JButton btnAddDepFunc;
    private javax.swing.JButton btnCandidateKeys;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnDelAtr;
    private javax.swing.JButton btnDelDepFunc;
    private javax.swing.JButton btnEditAtr;
    private javax.swing.JButton btnEditDepFunc;
    private javax.swing.JButton btnGetPartitions;
    private javax.swing.JButton btnRemFuncDepRedundant;
    private javax.swing.JButton btnRemStrangeElemLeft;
    private javax.swing.JButton btnRightDecomposition;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList<String> jlAtributos;
    private javax.swing.JList<HashSet<String>> jlCandidateKeys;
    private javax.swing.JList<FuncDependency> jlDepFuncionales;
    private javax.swing.JList<Relation> jlGetPartitions;
    private javax.swing.JList<FuncDependency> jlRemFuncDepRedundant;
    private javax.swing.JList<FuncDependency> jlRemStrangeElemLeft;
    private javax.swing.JList<FuncDependency> jlRightDecomp;
    private javax.swing.JPanel jpAtributos;
    private javax.swing.JPanel jpCandidateKeys;
    private javax.swing.JPanel jpDepFuncionales;
    private javax.swing.JPanel jpGetPartitions;
    private javax.swing.JPanel jpRemFuncDepRedundant;
    private javax.swing.JPanel jpRemStrangeElemLeft;
    private javax.swing.JPanel jpRightDecomp;
    private javax.swing.JTabbedPane jtpResultados;
    private javax.swing.JTabbedPane jtpVista;
    // End of variables declaration//GEN-END:variables
}
